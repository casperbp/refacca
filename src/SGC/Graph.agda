open import Level renaming (suc to ‚Ñìsuc; zero to ‚Ñì0)

open import Data.Nat as N
open import Data.Nat.Properties as NP

open import Data.Bool
open import Data.Sum renaming ([_,_] to _‚àá_)

open import Data.Fin as F
open import Data.Fin.Properties as FP

open import Data.List as L
open import Data.List.Membership.Propositional as LM
open import Data.List.Properties as LP
open import Data.List.Relation.Unary.Any as A?
open import Data.List.Relation.Unary.All as A
open import Data.List.Relation.Binary.Pointwise
open import Data.List.Relation.Binary.Pointwise.Properties as PP
open import Data.List.Relation.Binary.Suffix.Heterogeneous
open import Data.List.Relation.Binary.Suffix.Heterogeneous.Properties as HP

open import Data.Product

open import Relation.Nullary
open import Relation.Nullary.Decidable
open import Relation.Binary.Bundles using (DecPoset)
open import Relation.Binary.PropositionalEquality as E
open import Relation.Binary.Definitions using (DecidableEquality)

module SGC.Graph
    (Name Ty : Set)
    (LDP : DecPoset ‚Ñì0 ‚Ñì0 ‚Ñì0)
    (let Lbl = DecPoset.Carrier LDP)
    (_‚à∂_ : Name ‚Üí Ty ‚Üí Lbl)
    (tl tu : Ty)
    (‚à∂‚â§ : ‚àÄ {l x} ‚Üí DecPoset._‚â§_ LDP (x ‚à∂ tl) l ‚Üí DecPoset._‚â§_ LDP l (x ‚à∂ tu) ‚Üí ‚àÉ Œª t ‚Üí l ‚â° x ‚à∂ t)
    (lex : Lbl)
  where

open DecPoset LDP renaming (_‚â§?_ to _L‚â§?_; _‚âà_ to _L‚âà_)

private
  po = DecPoset.preorder LDP

open import Text.Regex.Base po as R
open import Text.Regex.Derivative.Brzozowski LDP as RB
open import Text.Regex.Properties LDP as RP
open import SGC.Core Name Ty LDP

-- helper lemmas

suffix-refl : {A : Set} {xs : List A} ‚Üí Suffix _‚â°_ xs xs
suffix-refl = here (PP.refl E.refl)

pw-refl : {A : Set} {xs ys : List A} ‚Üí Pointwise _‚â°_ xs ys ‚Üí xs ‚â° ys
pw-refl [] = E.refl
pw-refl (x‚àºy ‚à∑ x) = cong‚ÇÇ _‚à∑_ x‚àºy (pw-refl x)


-- Edges
------------------------------------------------------------------------

record Edge (n : ‚Ñï) : Set where
  constructor _-[_]->_
  field src‚Çë : Fin n
        lbl‚Çë : Lbl
        tgt‚Çë : Fin n
  

open Edge

wk-edge : ‚àÄ {n m} ‚Üí n N.‚â§ m ‚Üí Edge n ‚Üí Edge m
wk-edge r (s -[ l ]-> t) = (inject‚â§ s r) -[ l ]-> (inject‚â§ t r)

wk-edges-refl : {n : ‚Ñï} {es : List (Edge n)} ‚Üí L.map (wk-edge NP.‚â§-refl) es
                                             ‚â° es
wk-edges-refl = map-id-local (A.tabulate Œª where
  {s -[ l ]-> t} _ ‚Üí cong‚ÇÇ (_-[ _ ]->_) (inject‚â§-refl _ NP.‚â§-refl) (inject‚â§-refl _ NP.‚â§-refl))

wk-edge-trans‚â° : {n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñï} (r‚ÇÅ : n‚ÇÅ N.‚â§ n‚ÇÇ) (r‚ÇÇ : n‚ÇÇ N.‚â§ n‚ÇÉ) (e : Edge n‚ÇÅ)
               ‚Üí wk-edge r‚ÇÇ (wk-edge r‚ÇÅ e) ‚â° wk-edge (NP.‚â§-trans r‚ÇÅ r‚ÇÇ) e
wk-edge-trans‚â° r‚ÇÅ r‚ÇÇ e = cong‚ÇÇ _-[ _ ]->_ (inject‚â§-trans _ r‚ÇÅ r‚ÇÇ) (inject‚â§-trans _ r‚ÇÅ r‚ÇÇ)

suffix-wk : ‚àÄ {n m : ‚Ñï} (es‚ÇÅ es‚ÇÇ : List (Edge n)) (r : n N.‚â§ m)
          ‚Üí Suffix _‚â°_ es‚ÇÅ es‚ÇÇ
          ‚Üí Suffix _‚â°_ (L.map (wk-edge r) es‚ÇÅ) (L.map (wk-edge r) es‚ÇÇ)
suffix-wk es‚ÇÅ es‚ÇÇ r (here x) with pw-refl x
... | E.refl = here (PP.refl E.refl)
suffix-wk es‚ÇÅ .(_ ‚à∑ _) r (there x) = there (suffix-wk es‚ÇÅ _ r x)

record Graph : Set where
  constructor G‚ü®_‚àô_‚àô_‚ü©
  field sc#   : ‚Ñï
        edges : List (Edge sc#)
        opn   : List (Fin sc#)

open Graph

record _‚äë_ (g‚ÇÅ g‚ÇÇ : Graph) : Set where
  constructor ‚äë‚ü®_‚àô_‚ü©
  field sc#‚äë   : sc# g‚ÇÅ N.‚â§ sc# g‚ÇÇ
        edges‚äë : Suffix _‚â°_ (L.map (wk-edge sc#‚äë) (edges g‚ÇÅ)) (edges g‚ÇÇ)

open _‚äë_

‚äë-refl : ‚àÄ {g} ‚Üí g ‚äë g
sc#‚äë ‚äë-refl = NP.‚â§-refl
edges‚äë ‚äë-refl = subst (Œª X ‚Üí Suffix _‚â°_ X _) (sym wk-edges-refl) suffix-refl

‚äë-trans : ‚àÄ {g‚ÇÅ g‚ÇÇ g‚ÇÉ} ‚Üí g‚ÇÅ ‚äë g‚ÇÇ ‚Üí g‚ÇÇ ‚äë g‚ÇÉ ‚Üí g‚ÇÅ ‚äë g‚ÇÉ
sc#‚äë (‚äë-trans r‚ÇÅ r‚ÇÇ) = NP.‚â§-trans (sc#‚äë r‚ÇÅ) (sc#‚äë r‚ÇÇ)
edges‚äë (‚äë-trans {g‚ÇÅ} {g‚ÇÇ} r‚ÇÅ r‚ÇÇ) = HP.trans E.trans
  (let x = suffix-wk _ _ (sc#‚äë r‚ÇÇ) (edges‚äë r‚ÇÅ) in
    subst (Œª X ‚Üí Suffix _‚â°_ X _)
          (E.trans
            (sym (map-‚àò (edges g‚ÇÅ)))
            (map-cong (Œª x ‚Üí wk-edge-trans‚â° (sc#‚äë r‚ÇÅ) (sc#‚äë r‚ÇÇ) x) (edges g‚ÇÅ)))
          x)
  (edges‚äë r‚ÇÇ)


Word = List Lbl

data Path (g : Graph) : Fin (sc# g) ‚Üí Word ‚Üí Set where
  step : ‚àÄ {s w w‚Ä≤} (e : Edge (sc# g))
       ‚Üí src‚Çë e ‚â° s
       ‚Üí e LM.‚àà edges g
       ‚Üí Path g (tgt‚Çë e) w
       ‚Üí w‚Ä≤ ‚â° lbl‚Çë e ‚à∑ w
       ‚Üí Path g s w‚Ä≤
  stop : ‚àÄ {s} ‚Üí Path g s []


-- filter : ‚àÄ {P : Pred A p} ‚Üí Decidable P ‚Üí List A ‚Üí List A
-- filter P? [] = []
-- filter P? (x ‚à∑ xs) =
--   let xs‚Ä≤ = filter P? xs in
--   if does (P? x)
--     then x ‚à∑ xs‚Ä≤
--     else xs‚Ä≤

outgoing : ‚àÄ {n} ‚Üí (œÜ : Fin n)
         ‚Üí Exp
         ‚Üí (es : List (Edge n))
         ‚Üí List (‚àÉ Œª (e : Edge n) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà es)
outgoing œÜ r [] = []
outgoing œÜ r (e ‚à∑ xs) with (src‚Çë e FP.‚âü œÜ) √ó-dec (¬¨? (is-‚àÖ (eat (lbl‚Çë e) r)))
... | yes (eq , p) = let xs‚Ä≤ = outgoing œÜ r xs
  in (e , eq , here E.refl) ‚à∑ L.map (Œª (e‚Ä≤ , eq‚Ä≤ , w‚Ä≤) ‚Üí e‚Ä≤ , eq‚Ä≤ , there w‚Ä≤) xs‚Ä≤
... | no ¬¨p = let xs‚Ä≤ = outgoing œÜ r xs
  in L.map (Œª (e‚Ä≤ , eq‚Ä≤ , w‚Ä≤) ‚Üí e‚Ä≤ , eq‚Ä≤ , there w‚Ä≤) xs‚Ä≤

least-elements : ‚àÄ {n œÜ es} ‚Üí List (‚àÉ Œª (e : Edge n) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà es)
               ‚Üí List (‚àÉ Œª (e : Edge n) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà es)
               √ó List (‚àÉ Œª (e : Edge n) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà es)
least-elements es =
  partition (Œª (e‚ÇÅ , eq) ‚Üí A.all? (Œª (e‚ÇÇ , _) ‚Üí -- y L‚â§? x ‚Üí-dec 
    lbl‚Çë e‚ÇÅ L‚â§? lbl‚Çë e‚ÇÇ) es) es

data Err : Set where
  resolution-error ambiguity-error : Err

_ùì£_ : ‚àÄ {A : Set} ‚Üí Err ‚Üí (Err ‚äé A) ‚Üí (Err ‚äé A)
ambiguity-error ùì£ (inj‚ÇÅ _) = inj‚ÇÅ ambiguity-error
_ ùì£ m = m

{-# TERMINATING #-}
resolve : (g : Graph)           -- cur graph
        ‚Üí List (Fin (sc# g))    -- seens (cycle detection)
        ‚Üí (re : Exp)            -- regex
        ‚Üí (œÜ : Fin (sc# g))     -- cur scope
        ‚Üí Err ‚äé (‚àÉ Œª w ‚Üí Path g œÜ w √ó w R.‚àà re)  -- res

res1 : (g : Graph)
     ‚Üí List (Fin (sc# g))    -- seens
     ‚Üí (re : Exp)            -- regex
     ‚Üí (œÜ : Fin (sc# g))
     ‚Üí List (‚àÉ Œª (e : Edge (sc# g)) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà edges g)   -- edges to try
     ‚Üí Err ‚äé (‚àÉ Œª w ‚Üí Path g œÜ w √ó w R.‚àà re)

res2 : (g : Graph)
     ‚Üí List (Fin (sc# g))    -- seens
     ‚Üí (re : Exp)            -- regex
     ‚Üí (œÜ : Fin (sc# g))
     ‚Üí List (‚àÉ Œª (e : Edge (sc# g)) ‚Üí src‚Çë e ‚â° œÜ √ó e LM.‚àà edges g) -- edges to try
     ‚Üí Err ‚äé (‚àÉ Œª w ‚Üí Path g œÜ w √ó w R.‚àà re)

res1 g œÜs r œÜ = foldr
  (Œª (e , eq , lw) m ‚Üí
    ( (Œª e ‚Üí e ùì£ m)
    ‚àá (Œª (w , p , q) ‚Üí
         ( (Œª _ ‚Üí inj‚ÇÇ (lbl‚Çë e ‚à∑ w , step e eq lw p E.refl , eat-sound (lbl‚Çë e) r q))
         ‚àá Œª _ ‚Üí inj‚ÇÅ ambiguity-error )
         m) )
    (resolve g (œÜ ‚à∑ œÜs) (eat (lbl‚Çë e) r) (tgt‚Çë e)))
  (inj‚ÇÅ resolution-error)

res2 g œÜs r œÜ [] = inj‚ÇÅ resolution-error
res2 g œÜs r œÜ es@(_ ‚à∑ _) = let
    (least , rest) = least-elements es
  in ( (Œª _ ‚Üí res2 g œÜs r œÜ rest)
     ‚àá inj‚ÇÇ )
     (res1 g œÜs r œÜ least)


-- Fixme: missing check for when r is empty.
resolve g œÜs r œÜ with A?.any? (œÜ FP.‚âü_) œÜs
... | yes _ = inj‚ÇÅ resolution-error -- cycle detected
... | no  _ = let
    es = outgoing œÜ r (edges g)
  in res2 g œÜs r œÜ es

runM : ‚àÄ (g‚ÇÅ : Graph) {P} ‚Üí M (sc# g‚ÇÅ) (opn g‚ÇÅ) P ‚Üí Err ‚äé (‚àÉ Œª g‚ÇÇ ‚Üí g‚ÇÅ ‚äë g‚ÇÇ √ó P (sc# g‚ÇÇ))
runM g (pure x) = inj‚ÇÇ (g , ‚äë-refl , x)
runM g (imp œÜ œÜ‚Ä≤ l x‚ÇÅ x‚ÇÇ m) = let
    g‚Ä≤ = G‚ü® (sc# g) ‚àô ((œÜ -[ l ]-> œÜ‚Ä≤) ‚à∑ edges g) ‚àô opn g ‚ü©
    r = runM g‚Ä≤ m
  in ( inj‚ÇÅ
     ‚àá Œª (g‚Ä≥ , ext , p) ‚Üí inj‚ÇÇ
              ( g‚Ä≥
              , ‚äë-trans
                  ‚äë‚ü® NP.‚â§-refl ‚àô (there (subst (Œª X ‚Üí Suffix _‚â°_ X _) (sym wk-edges-refl) suffix-refl)) ‚ü©
                  ext
              , p ) )
     r
runM g (new œÜ m k) = let
    g‚Ä≤ = G‚ü® N.suc (sc# g)
          ‚àô L.map (wk-edge (n‚â§1+n _)) (edges g)
          ‚àô from‚Ñï (sc# g) ‚à∑ L.map (Œª x ‚Üí inject‚â§ x (n‚â§1+n _)) (opn g) ‚ü©
    r‚ÇÅ = runM g‚Ä≤ m
  in ( inj‚ÇÅ
     ‚àá Œª (g‚Ä≥ , ext , _) ‚Üí let
         g‚ÇÅ = G‚ü® sc# g‚Ä≥
               ‚àô (inject‚â§ (from‚Ñï (sc# g)) (sc#‚äë ext)
                   -[ lex ]->
                     inject‚â§ œÜ (NP.‚â§-trans (n‚â§1+n _) (sc#‚äë ext)))
                 ‚à∑ edges g‚Ä≥
               ‚àô L.map (Œª x ‚Üí inject‚â§ x (NP.‚â§-trans (n‚â§1+n _) (sc#‚äë ext))) (opn g) ‚ü©
         r‚ÇÇ = runM g‚ÇÅ (k (NP.‚â§-trans (n‚â§1+n _) (sc#‚äë ext)))
       in ( inj‚ÇÅ
          ‚àá Œª (g‚ÇÇ , ext‚Ä≤ , p) ‚Üí
            inj‚ÇÇ ( g‚ÇÇ
                 , ‚äë-trans ‚äë‚ü® NP.‚â§-trans (n‚â§1+n _) (sc#‚äë ext)
                              ‚àô there (HP.trans E.trans
                                         (subst (Suffix _‚â°_ (L.map
                                                               (wk-edge
                                                                (NP.‚â§-trans (n‚â§1+n (sc# g))
                                                                 (sc#‚äë ext)))
                                                               (edges g)))
                                                (E.trans
                                                  (sym
                                                    (map-cong
                                                      (wk-edge-trans‚â° (n‚â§1+n _) (sc#‚äë ext))
                                                      (edges g)))
                                                  (map-‚àò _))
                                                suffix-refl)
                                         (edges‚äë ext)) ‚ü© ext‚Ä≤
                 , p ) )
          r‚ÇÇ )
     r‚ÇÅ
runM g (res re x œÜ m) = let r = resolve g [] (re R.‚àô R.[ (x ‚à∂ tl) R.‚îÄ (x ‚à∂ tu) ‚à∑ [] ]) œÜ
  in ( inj‚ÇÅ
     ‚àá Œª (w , _ , q) ‚Üí runM g (m (extr re x q)) )
     r
  where
    extr : ‚àÄ {w : List Lbl} (re : Exp) (x : Name)
         ‚Üí w R.‚àà (re R.‚àô (R.[ (x ‚à∂ tl) R.‚îÄ (x ‚à∂ tu) ‚à∑ [] ]))
         ‚Üí Ty
    extr re x (prod eq r‚ÇÅ [ here (x‚ÇÅ R.‚îÄ x‚ÇÇ) ]) = let (t , _) = ‚à∂‚â§ x‚ÇÅ x‚ÇÇ in t


